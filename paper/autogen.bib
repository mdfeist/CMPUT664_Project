
@inproceedings{falleri2014,
  title = {Fine-grained and accurate source code differencing},
  isbn = {978-1-4503-3013-8},
  url = {http://dl.acm.org/citation.cfm?doid=2642937.2642982},
  doi = {10.1145/2642937.2642982},
  timestamp = {2016-04-03T05:06:35Z},
  langid = {english},
  publisher = {{ACM Press}},
  author = {Falleri, Jean-Rémy and Morandat, Floréal and Blanc, Xavier and Martinez, Matias and Montperrus, Martin},
  urldate = {2016-04-03},
  date = {2014},
  pages = {313--324}
}

@inproceedings{badashian2014,
  title = {Involvement, contribution and influence in {{GitHub}} and stack overflow},
  url = {http://webdocs.cs.ualberta.ca/~hindle1/2014/ali-cascon-paper.pdf},
  timestamp = {2016-04-05T19:40:00Z},
  booktitle = {Proceedings of 24th {{Annual International Conference}} on {{Computer Science}} and {{Software Engineering}}},
  publisher = {{IBM Corp.}},
  author = {Badashian, Ali Sajedi and Esteki, Afsaneh and Gholipour, Ameneh and Hindle, Abram and Stroulia, Eleni},
  urldate = {2016-04-05},
  date = {2014},
  pages = {19--33}
}

@article{vincenzi2003,
  title = {{{JaBUTi}}: {{A}} coverage analysis tool for {{Java}} programs},
  url = {http://ccsl.icmc.usp.br/files/vincenzi-et-al-2003.pdf},
  shorttitle = {{{JaBUTi}}},
  timestamp = {2016-03-14T15:53:22Z},
  journaltitle = {XVII SBES–Simpósio Brasileiro de Engenharia de Software, Manaus, AM, Brasil},
  author = {Vincenzi, A. M. R. and Wong, W. E. and Delamaro, M. E. and Maldonado, J. C.},
  urldate = {2016-03-14},
  date = {2003},
  pages = {79--84}
}

@inproceedings{badashian2015,
  title = {Crowdsourced bug triaging},
  url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=7332503},
  timestamp = {2016-04-05T19:40:43Z},
  booktitle = {Software {{Maintenance}} and {{Evolution}} ({{ICSME}}), 2015 {{IEEE International Conference}} on},
  publisher = {{IEEE}},
  author = {Badashian, Ali Sajedi and Hindle, Abram and Stroulia, Eleni},
  urldate = {2016-04-05},
  date = {2015},
  pages = {506--510}
}

@inproceedings{inozemtseva2014,
  title = {Coverage is not strongly correlated with test suite effectiveness},
  url = {http://dl.acm.org/citation.cfm?id=2568271},
  timestamp = {2016-04-06T20:46:44Z},
  booktitle = {Proceedings of the 36th {{International Conference}} on {{Software Engineering}}},
  publisher = {{ACM}},
  author = {Inozemtseva, Laura and Holmes, Reid},
  urldate = {2016-04-06},
  date = {2014},
  pages = {435--445}
}

@inproceedings{lee2013,
  title = {A {{Git Source Repository Analysis Tool Based}} on a {{Novel Branch-Oriented Approach}}},
  doi = {10.1109/ICISA.2013.6579457},
  abstract = {Code repositories of the version control systems have been used as important raw material in lots of developer behavior studies. In such research, commits are usually considered as a unit of development phases, even though they contain limited information over development process. Unlike former source code management systems, Git provides branching, which are the unit of concurrent and independent development activities in a whole project. Branches have significant advantages over commits from the viewpoint of the developer behavior researchers. By exploiting the characteristics of branching, we propose a Git branch analysis tool. The proposed tool automatically extracts branching data from Git repositories and performs statistical and graphical analysis on them. Through a few case studies using a number of popular OSS project repositories, we showed that the proposed branch-oriented analyzer is able to perform more insightful analysis than the existing commit-based analyzers.},
  eventtitle = {2013 International Conference on Information Science and Applications (ICISA)},
  timestamp = {2016-04-08T17:40:37Z},
  booktitle = {2013 {{International Conference}} on {{Information Science}} and {{Applications}} ({{ICISA}})},
  author = {Lee, H. and Seo, B. K. and Seo, E.},
  date = {2013-06},
  pages = {1--4},
  keywords = {automatic branching data extraction,branch-oriented analyzer,concurrency control,concurrent development activities,Conferences,data handling,data mining,development phases,development process,Git branch analysis tool,Git source repository analysis tool,graphical analysis,History,independant development activities,Kernel,Linux,Merging,Open source software,open source software project repositories,OSS project repositories,project management,public domain software,raw material,source coding,statistical analysis,version control systems}
}

@inproceedings{voinea2006,
  location = {{New York, NY, USA}},
  title = {An {{Open Framework}} for {{CVS Repository Querying}}, {{Analysis}} and {{Visualization}}},
  isbn = {978-1-59593-397-3},
  url = {http://doi.acm.org/10.1145/1137983.1137993},
  doi = {10.1145/1137983.1137993},
  abstract = {We present an open framework for visual mining of CVS software repositories. We address three aspects: data extraction, analysis and visualization. We first discuss the challenges of CVS data extraction and storage, and propose a flexible way to deal with CVS implementation inconsistencies. We next present a new technique to enrich the raw data with information about artifacts showing similar evolution. Finally, we propose a visualization backend and show its applicability on industry-size repositories.},
  timestamp = {2016-04-08T17:45:55Z},
  booktitle = {Proceedings of the 2006 {{International Workshop}} on {{Mining Software Repositories}}},
  series = {MSR '06},
  publisher = {{ACM}},
  author = {Voinea, Lucian and Telea, Alexandru},
  urldate = {2016-04-08},
  date = {2006},
  pages = {33--39},
  keywords = {CVS repositories,evolution visualization,software visualization}
}

@inproceedings{wu2004,
  title = {Exploring software evolution using spectrographs},
  doi = {10.1109/WCRE.2004.20},
  abstract = {Software systems become progressively more complex and difficult to maintain. To facilitate maintenance tasks, project managers and developers often turn to the evolution history of the system to recover various kinds of useful information, such as anomalous phenomena and lost design decisions. An informative visualization of the evolution history can help cope with this complexity by highlighting conspicuous evolution events using strong visual cues. We present a scalable visualization technique called evolution spectrographs (ESG). An evolution spectrograph portrays the evolution of a spectrum of components based on a particular property measurement. We describe several special-purpose spectrographs and discuss their use in understanding and supporting software evolution through the case studies of three large software systems (OpenSSH, KOffice and FreeBSD).},
  eventtitle = {11th Working Conference on Reverse Engineering, 2004. Proceedings},
  timestamp = {2016-04-08T17:51:04Z},
  booktitle = {11th {{Working Conference}} on {{Reverse Engineering}}, 2004. {{Proceedings}}},
  author = {Wu, Jingwei and Holt, R. C. and Hassan, A. E.},
  date = {2004-11},
  pages = {80--89},
  keywords = {Computer science,Costs,Data visualization,evolution spectrographs,FreeBSD,Frequency,History,informative evolution visualization,KOffice,OpenSSH,Particle measurements,program visualisation,project management,scalable visualization technique,software evolution,software maintainance,software maintenance,software systems,system evolution history,Time measurement}
}

@inproceedings{wu2004a,
  title = {Evolution {{Spectrographs}}: visualizing punctuated change in software evolution},
  doi = {10.1109/IWPSE.2004.1334769},
  shorttitle = {Evolution {{Spectrographs}}},
  abstract = {Software evolution is commonly characterized as a slow process of incremental change. Researchers have observed that software systems also exhibit characteristics of punctuation (sudden and discontinuous change) during their evolution. We analyze punctuated evolution from the perspective of structural change. We developed a color-coded visualization technique called the Evolution Spectrograph (ESG). ESG can be applied to highlight conspicuous changes across a historical sequence of software releases. We describe evolution spectrographs and present the empirical results from our studies of three open source software systems: OpenSSH, PostgreSQL, and Linux. We show that punctuated change occurred in the evolution of these three systems, and we validate our empirical results by examining related software documents such as change logs and release notes.},
  eventtitle = {7th International Workshop on Principles of Software Evolution, 2004. Proceedings},
  timestamp = {2016-04-08T18:11:48Z},
  booktitle = {7th {{International Workshop}} on {{Principles}} of {{Software Evolution}}, 2004. {{Proceedings}}},
  author = {Wu, Jingwei and Spitzer, C. W. and Hassan, A. E. and Holt, R. C.},
  date = {2004-09},
  pages = {57--66},
  keywords = {change logs,color-coded visualization,Computer architecture,Computer science,configuration management,discontinuous change,Evolution (biology),Evolution Spectrograph,evolution spectrographs,Genetic mutations,Linux,Open source software,open source software systems,OpenSSH,PostgreSQL,program visualisation,punctuated change visualization,punctuated evolution,release notes,Sequences,Software architecture,software documents,software evolution,software maintenance,software process improvement,Software prototyping,software systems,structural change,sudden change,Visualization}
}

@inproceedings{robles2014,
  location = {{New York, NY, USA}},
  title = {Estimating {{Development Effort}} in {{Free}}/{{Open Source Software Projects}} by {{Mining Software Repositories}}: {{A Case Study}} of {{OpenStack}}},
  isbn = {978-1-4503-2863-0},
  url = {http://doi.acm.org/10.1145/2597073.2597107},
  doi = {10.1145/2597073.2597107},
  shorttitle = {Estimating {{Development Effort}} in {{Free}}/{{Open Source Software Projects}} by {{Mining Software Repositories}}},
  abstract = {Because of the distributed and collaborative nature of free / open source software (FOSS) projects, the development effort invested in a project is usually unknown, even after the software has been released. However, this information is becoming of major interest, especially ---but not only--- because of the growth in the number of companies for which FOSS has become relevant for their business strategy. In this paper we present a novel approach to estimate effort by considering data from source code management repositories. We apply our model to the OpenStack project, a FOSS project with more than 1,000 authors, in which several tens of companies cooperate. Based on data from its repositories and together with the input from a survey answered by more than 100 developers, we show that the model offers a simple, but sound way of obtaining software development estimations with bounded margins of error.},
  timestamp = {2016-04-08T21:47:52Z},
  booktitle = {Proceedings of the 11th {{Working Conference}} on {{Mining Software Repositories}}},
  series = {MSR 2014},
  publisher = {{ACM}},
  author = {Robles, Gregorio and González-Barahona, Jesús M. and Cervigón, Carlos and Capiluppi, Andrea and Izquierdo-Cortázar, Daniel},
  urldate = {2016-04-08},
  date = {2014},
  pages = {222--231},
  keywords = {Effort estimation,free software,Mining software repositories,open source}
}


