@ARTICLE{bowman:reasoning,
    AUTHOR = "Mic Bowman and Saumya K. Debray and Larry L. Peterson",
    TITLE = "Reasoning About Naming Systems",
    JOURNAL = "ACM Trans. Program. Lang. Syst.",
    VOLUME = {15},
    NUMBER = {5},
    PAGES = {795-825},
    MONTH = "November",
    YEAR = {1993}    }

@ARTICLE{braams:babel,
    AUTHOR = "Johannes Braams",
    TITLE = "Babel, a Multilingual Style-Option System for Use with LaTeX's Standard Document Styles",
    JOURNAL = {TUGboat},
    VOLUME = {12},
    NUMBER = {2},
    PAGES = {291-301},
    MONTH = "June",
    YEAR = {1991}    }

@INPROCEEDINGS{clark:pct,
    AUTHOR = "Malcolm Clark",
    TITLE = "Post Congress Tristesse",
    BOOKTITLE = "TeX90 Conference Proceedings",
    PAGES = "84-89",
    ORGANIZATION = "TeX Users Group",
    MONTH = "March",
    YEAR = {1991}    }

@ARTICLE{herlihy:methodology,
    AUTHOR = "Maurice Herlihy",
    TITLE = "A Methodology for Implementing Highly Concurrent
    Data Objects",
    JOURNAL = {ACM Trans. Program. Lang. Syst.},
    VOLUME = {15},
    NUMBER = {5},
    PAGES = {745-770},
    MONTH = "November",
    YEAR = {1993}    }

@BOOK{Lamport:LaTeX,
    AUTHOR = "Leslie Lamport",
    TITLE = "LaTeX User's Guide and Document Reference Manual",
    PUBLISHER = "Addison-Wesley Publishing Company",
    ADDRESS = "Reading, Massachusetts",
    YEAR = "1986"    }

@BOOK{salas:calculus,
    AUTHOR = "S.L. Salas and Einar Hille",
    TITLE = "Calculus: One and Several Variable",
    PUBLISHER = "John Wiley and Sons",
    ADDRESS = "New York",
    YEAR = "1978"    }

@inproceedings{Dyer-Nguyen-Rajan-Nguyen-13,
  author = {Dyer, Robert and Nguyen, Hoan Anh and Rajan, Hridesh and Nguyen, Tien N.},
  title = {Boa: A Language and Infrastructure for Analyzing Ultra-Large-Scale Software Repositories},
  booktitle = {35th International Conference on Software Engineering},
  series = {ICSE 2013},
  month = {May},
  year = {2013},
  pages = {422--431},
  location = {San Francisco, CA},
}

@inproceedings{falleri:hal-01054552,
  TITLE = {{Fine-grained and Accurate Source Code Differencing}},
  AUTHOR = {Falleri, Jean-R{\'e}my and Morandat, Flor{\'e}al and Blanc, Xavier and Martinez, Matias and Monperrus, Martin},
  URL = {https://hal.archives-ouvertes.fr/hal-01054552},
  BOOKTITLE = {{ASE 2014}},
  ADDRESS = {France},
  PAGES = {11 p.},
  YEAR = {2014},
  PDF = {https://hal.archives-ouvertes.fr/hal-01054552/file/main.pdf},
  HAL_ID = {hal-01054552},
  HAL_VERSION = {v1},
}

@article{pawlak:hal-01169705,
  TITLE = {Spoon: A Library for Implementing Analyses and Transformations of Java Source Code},
  AUTHOR = {Pawlak, Renaud and Monperrus, Martin and Petitprez, Nicolas and Noguera, Carlos and Seinturier, Lionel},
  JOURNAL = {Software: Practice and Experience},
  PUBLISHER = {Wiley-Blackwell},
  PAGES = {na},
  YEAR = {2015},
  doi = {10.1002/spe.2346},
  url = {https://hal.archives-ouvertes.fr/hal-01078532/document}
}

@inproceedings{Dyer:2014:MBA:2568225.2568295,
 author = {Dyer, Robert and Rajan, Hridesh and Nguyen, Hoan Anh and Nguyen, Tien N.},
 title = {Mining Billions of AST Nodes to Study Actual and Potential Usage of Java Language Features},
 booktitle = {Proceedings of the 36th International Conference on Software Engineering},
 series = {ICSE 2014},
 year = {2014},
 isbn = {978-1-4503-2756-5},
 location = {Hyderabad, India},
 pages = {779--790},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/2568225.2568295},
 doi = {10.1145/2568225.2568295},
 acmid = {2568295},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Java, empirical study, language feature use, software mining},
}

@inproceedings{Grechanik:2010:EIL:1852786.1852801,
 author = {Grechanik, Mark and McMillan, Collin and DeFerrari, Luca and Comi, Marco and Crespi, Stefano and Poshyvanyk, Denys and Fu, Chen and Xie, Qing and Ghezzi, Carlo},
 title = {An Empirical Investigation into a Large-scale Java Open Source Code Repository},
 booktitle = {Proceedings of the 2010 ACM-IEEE International Symposium on Empirical Software Engineering and Measurement},
 series = {ESEM '10},
 year = {2010},
 isbn = {978-1-4503-0039-1},
 location = {Bolzano-Bozen, Italy},
 pages = {11:1--11:10},
 articleno = {11},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/1852786.1852801},
 doi = {10.1145/1852786.1852801},
 acmid = {1852801},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {empirical study, large-scale software, mining software repositories, open source, patterns, practice, software repository},
}

@inproceedings{Meyerovich:2013:EAP:2509136.2509515,
 author = {Meyerovich, Leo A. and Rabkin, Ariel S.},
 title = {Empirical Analysis of Programming Language Adoption},
 booktitle = {Proceedings of the 2013 ACM SIGPLAN International Conference on Object Oriented Programming Systems Languages \&\#38; Applications},
 series = {OOPSLA '13},
 year = {2013},
 isbn = {978-1-4503-2374-1},
 location = {Indianapolis, Indiana, USA},
 pages = {1--18},
 numpages = {18},
 url = {http://doi.acm.org/10.1145/2509136.2509515},
 doi = {10.1145/2509136.2509515},
 acmid = {2509515},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {programming language adoption, survey research},
}

@article{Hoppe:2013:DBG:2544173.2509528,
 author = {Hoppe, Michael and Hanenberg, Stefan},
 title = {Do Developers Benefit from Generic Types?: An Empirical Comparison of Generic and Raw Types in Java},
 journal = {SIGPLAN Not.},
 issue_date = {October 2013},
 volume = {48},
 number = {10},
 month = oct,
 year = {2013},
 issn = {0362-1340},
 pages = {457--474},
 numpages = {18},
 url = {http://doi.acm.org/10.1145/2544173.2509528},
 doi = {10.1145/2544173.2509528},
 acmid = {2509528},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {empirical research, generic types, programming languages, type systems},
}

@inproceedings{Parnin:2011:JGA:1985441.1985446,
 author = {Parnin, Chris and Bird, Christian and Murphy-Hill, Emerson},
 title = {Java Generics Adoption: How New Features Are Introduced, Championed, or Ignored},
 booktitle = {Proceedings of the 8th Working Conference on Mining Software Repositories},
 series = {MSR '11},
 year = {2011},
 isbn = {978-1-4503-0574-7},
 location = {Waikiki, Honolulu, HI, USA},
 pages = {3--12},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/1985441.1985446},
 doi = {10.1145/1985441.1985446},
 acmid = {1985446},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {generics, java, languages, post-mortem analysis},
}

@inproceedings{Gorschek:2010:LES:1806799.1806820,
 author = {Gorschek, Tony and Tempero, Ewan and Angelis, Lefteris},
 title = {A Large-scale Empirical Study of Practitioners' Use of Object-oriented Concepts},
 booktitle = {Proceedings of the 32Nd ACM/IEEE International Conference on Software Engineering - Volume 1},
 series = {ICSE '10},
 year = {2010},
 isbn = {978-1-60558-719-6},
 location = {Cape Town, South Africa},
 pages = {115--124},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/1806799.1806820},
 doi = {10.1145/1806799.1806820},
 acmid = {1806820},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {encapsulation, inheritance depth, number of methods, survey},
}

@InProceedings{KGSP09,
    author = {Eirini Kalliamvakou and Georgios Gousios and Diomidis Spinellis and Nancy Pouloudi},
    Title="Measuring Developer Contribution from Software Repository Data",
    Booktitle="MCIS 2009: 4th {M}editerranean Conference on Information Systems",
    Pages="600--611",
    Location="Athens, Greece",
    Month=sep,
    Year=2009,
    Editor="Poulymenakou, A. and Pouloudi, N. and Pramatari, K.",
    tags="",
    URL="http://www.dmst.aueb.gr/dds/pubs/conf/2009-MCIS-Quality/html/KGSP09.htm"
}

@inproceedings{Lammel:2011:LAA:1982185.1982471,
 author = {L\"{a}mmel, Ralf and Pek, Ekaterina and Starek, J\"{u}rgen},
 title = {Large-scale, AST-based API-usage Analysis of Open-source Java Projects},
 booktitle = {Proceedings of the 2011 ACM Symposium on Applied Computing},
 series = {SAC '11},
 year = {2011},
 isbn = {978-1-4503-0113-8},
 location = {TaiChung, Taiwan},
 pages = {1317--1324},
 numpages = {8},
 url = {http://doi.acm.org/10.1145/1982185.1982471},
 doi = {10.1145/1982185.1982471},
 acmid = {1982471},
 publisher = {ACM},
 address = {New York, NY, USA},
}

@inproceedings{Kalliamvakou:2014:PPM:2597073.2597074,
 author = {Kalliamvakou, Eirini and Gousios, Georgios and Blincoe, Kelly and Singer, Leif and German, Daniel M. and Damian, Daniela},
 title = {The Promises and Perils of Mining GitHub},
 booktitle = {Proceedings of the 11th Working Conference on Mining Software Repositories},
 series = {MSR 2014},
 year = {2014},
 isbn = {978-1-4503-2863-0},
 location = {Hyderabad, India},
 pages = {92--101},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/2597073.2597074},
 doi = {10.1145/2597073.2597074},
 acmid = {2597074},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Mining software repositories, bias, code reviews, git, github},
}

@manual{Patrick:Wagstrom:2012,
 author = {Wagstrom, Jergensen, Sarma},
 title = {Roles in a Networked Software Development Ecosystem: A Case Study in GitHub},
 booktitle = {Paper 149},
 series = {CSE Technical report},
 year = {2012},
 url = {http://digitalcommons.unl.edu/csetechreports/149},
 publisher = {ACM},
}

@online{github-graphs,
  title = {About {{Repository Graphs}} - {{User Documentation}}},
  url = {https://help.github.com/articles/about-repository-graphs/},
  timestamp = {2016-04-08T21:56:15Z},
  author = {{GitHub Inc.}},
  urldate = {2016-04-08}
}

@online{bitbucket-graphs,
  title = {Awesome {{Graphs}} for {{Bitbucket}}: visualized statistics for {{Git}} and {{Mercurial}} repositories},
  url = {https://blog.bitbucket.org/2015/08/05/awesome-graphs-for-bitbucket-visualized-statistics-for-git-and-mercurial-repositories/},
  shorttitle = {Awesome {{Graphs}} for {{Bitbucket}}},
  abstract = {This guest post is written by Alexander Kuznetsov, co-founder of StiltSoft. Alexander has seven years of experience as a software developer, including five years in developing add-ons for Atlassian platforms. He’s also the runner-up of 2012 Codegeist, Atlassian’s add-on development competition, for the add-on he built called, “Awesome Graphs for Stash.” We at StiltSoft, Atlassian verified vendor and expert, create add-ons for various Atlassian applications. Our team is always eager to provide developers with the handy tools they need so they can focus more on the important stuff, deliver on their work commitments with fewer efforts and enjoy the process at the same time. One of our products is Awesome Graphs for Stash. It provides graphs and charts to visualize the contribution statistics in Git repositories, evaluate a team’s performance and get useful data for planning and analysis. We have watched Bitbucket evolve at a rapid pace and couldn’t wait for the opportunity to make Awesome Graphs available in the cloud. We were very excited when he heard about Atlassian Connect for Bitbucket. The Atlassian Connect framework made it possible to build the add-on and make Awesome Graphs available for 3 million developers on Bitbucket. Awesome Graphs for Bitbucket Our goal currently is to make the graphs and charts of Awesome Graphs for Stash available in Bitbucket so that Bitbucket developers can visualize the statistics of their repositories, keep track of what the contributors have done, get analytical data for running retrospectives and plan their future work while making informed decisions. It is always very inspiring to watch your projects evolve by checking graphs from time to time. You can track your progress, see the work that has been done and feel accomplished. We released the first version of Awesome Graphs for Bitbucket in June with Commits and Punchcard. That’s only the beginning and more graphs are coming in the next couple of months. Why should you use Awesome Graphs? The Commits~tab shows the number of commits made over the last year grouped by week on a given repository. The interactive scatter chart below the bar chart displays detailed daily commits for the week selected on the bar chart. This allows you to get a summarized history of each repository and understand when most of the work was done. The Punchcard~tab helps you figure out which hours of the week have been the most productive for your team by showing commit frequency on each day of the week and time starting from the first commit in the repository. This helps you~plan your day’s activities so that you are not distracted and completely focused during the most productive hours. Most importantly, you can use the insights to improve the performance and efficiency of your team. Wanna see it in action? You can try Awesome Graphs for Bitbucket by installing the add-on from the Find new add-ons section of Bitbucket. You can start using it as soon as the installation is completed. Navigate to the Graphs section on the left-hand sidebar to view commits and punchcard graphs of the current repository. You can also share your feature requests ~by voting and commenting in Awesome Graphs for Bitbucket forum. If you run into any issues while using Awesome Graphs for Bitbucket, please, contact us.},
  timestamp = {2016-04-08T21:56:47Z},
  titleaddon = {Bitbucket},
  author = {{Atlassian Pty Ltd.}},
  urldate = {2016-04-08},
  date = {2015-08-05/2015-08}
}

@inproceedings{Kim:2009:DRS:1555001.1555046,
 author = {Kim, Miryung and Notkin, David},
 title = {Discovering and Representing Systematic Code Changes},
 booktitle = {Proceedings of the 31st International Conference on Software Engineering},
 series = {ICSE '09},
 year = {2009},
 isbn = {978-1-4244-3453-4},
 pages = {309--319},
 numpages = {11},
 url = {http://dx.doi.org/10.1109/ICSE.2009.5070531},
 doi = {10.1109/ICSE.2009.5070531},
 acmid = {1555046},
 publisher = {IEEE Computer Society},
 address = {Washington, DC, USA},
}

@inproceedings{robles2014,
  location = {{New York, NY, USA}},
  title = {Estimating {{Development Effort}} in {{Free}}/{{Open Source Software Projects}} by {{Mining Software Repositories}}: {{A Case Study}} of {{OpenStack}}},
  isbn = {978-1-4503-2863-0},
  url = {http://doi.acm.org/10.1145/2597073.2597107},
  doi = {10.1145/2597073.2597107},
  shorttitle = {Estimating {{Development Effort}} in {{Free}}/{{Open Source Software Projects}} by {{Mining Software Repositories}}},
  abstract = {Because of the distributed and collaborative nature of free / open source software (FOSS) projects, the development effort invested in a project is usually unknown, even after the software has been released. However, this information is becoming of major interest, especially ---but not only--- because of the growth in the number of companies for which FOSS has become relevant for their business strategy. In this paper we present a novel approach to estimate effort by considering data from source code management repositories. We apply our model to the OpenStack project, a FOSS project with more than 1,000 authors, in which several tens of companies cooperate. Based on data from its repositories and together with the input from a survey answered by more than 100 developers, we show that the model offers a simple, but sound way of obtaining software development estimations with bounded margins of error.},
  timestamp = {2016-04-08T21:47:52Z},
  booktitle = {Proceedings of the 11th {{Working Conference}} on {{Mining Software Repositories}}},
  series = {MSR 2014},
  publisher = {{ACM}},
  author = {Robles, Gregorio and González-Barahona, Jesús M. and Cervigón, Carlos and Capiluppi, Andrea and Izquierdo-Cortázar, Daniel},
  urldate = {2016-04-08},
  date = {2014},
  year = {2014},
  pages = {222--231},
  keywords = {Effort estimation,free software,Mining software repositories,open source}
}

@inproceedings{wu2004,
  title = {Exploring software evolution using spectrographs},
  doi = {10.1109/WCRE.2004.20},
  abstract = {Software systems become progressively more complex and difficult to maintain. To facilitate maintenance tasks, project managers and developers often turn to the evolution history of the system to recover various kinds of useful information, such as anomalous phenomena and lost design decisions. An informative visualization of the evolution history can help cope with this complexity by highlighting conspicuous evolution events using strong visual cues. We present a scalable visualization technique called evolution spectrographs (ESG). An evolution spectrograph portrays the evolution of a spectrum of components based on a particular property measurement. We describe several special-purpose spectrographs and discuss their use in understanding and supporting software evolution through the case studies of three large software systems (OpenSSH, KOffice and FreeBSD).},
  eventtitle = {11th Working Conference on Reverse Engineering, 2004. Proceedings},
  timestamp = {2016-04-08T17:51:04Z},
  booktitle = {11th {{Working Conference}} on {{Reverse Engineering}}, 2004. {{Proceedings}}},
  author = {Wu, Jingwei and Holt, R. C. and Hassan, A. E.},
  date = {2004-11},
  year = {2004},
  pages = {80--89},
  keywords = {Computer science,Costs,Data visualization,evolution spectrographs,FreeBSD,Frequency,History,informative evolution visualization,KOffice,OpenSSH,Particle measurements,program visualisation,project management,scalable visualization technique,software evolution,software maintainance,software maintenance,software systems,system evolution history,Time measurement}
}

@inproceedings{wu2004a,
  title = {Evolution {{Spectrographs}}: visualizing punctuated change in software evolution},
  doi = {10.1109/IWPSE.2004.1334769},
  shorttitle = {Evolution {{Spectrographs}}},
  abstract = {Software evolution is commonly characterized as a slow process of incremental change. Researchers have observed that software systems also exhibit characteristics of punctuation (sudden and discontinuous change) during their evolution. We analyze punctuated evolution from the perspective of structural change. We developed a color-coded visualization technique called the Evolution Spectrograph (ESG). ESG can be applied to highlight conspicuous changes across a historical sequence of software releases. We describe evolution spectrographs and present the empirical results from our studies of three open source software systems: OpenSSH, PostgreSQL, and Linux. We show that punctuated change occurred in the evolution of these three systems, and we validate our empirical results by examining related software documents such as change logs and release notes.},
  eventtitle = {7th International Workshop on Principles of Software Evolution, 2004. Proceedings},
  timestamp = {2016-04-08T18:11:48Z},
  booktitle = {7th {{International Workshop}} on {{Principles}} of {{Software Evolution}}, 2004. {{Proceedings}}},
  author = {Wu, Jingwei and Spitzer, C. W. and Hassan, A. E. and Holt, R. C.},
  date = {2004-09},
  year = {2004},
  pages = {57--66},
  keywords = {change logs,color-coded visualization,Computer architecture,Computer science,configuration management,discontinuous change,Evolution (biology),Evolution Spectrograph,evolution spectrographs,Genetic mutations,Linux,Open source software,open source software systems,OpenSSH,PostgreSQL,program visualisation,punctuated change visualization,punctuated evolution,release notes,Sequences,Software architecture,software documents,software evolution,software maintenance,software process improvement,Software prototyping,software systems,structural change,sudden change,Visualization}
}

@inproceedings{voinea2006,
  location = {{New York, NY, USA}},
  title = {An {{Open Framework}} for {{CVS Repository Querying}}, {{Analysis}} and {{Visualization}}},
  isbn = {978-1-59593-397-3},
  url = {http://doi.acm.org/10.1145/1137983.1137993},
  doi = {10.1145/1137983.1137993},
  abstract = {We present an open framework for visual mining of CVS software repositories. We address three aspects: data extraction, analysis and visualization. We first discuss the challenges of CVS data extraction and storage, and propose a flexible way to deal with CVS implementation inconsistencies. We next present a new technique to enrich the raw data with information about artifacts showing similar evolution. Finally, we propose a visualization backend and show its applicability on industry-size repositories.},
  timestamp = {2016-04-08T17:45:55Z},
  booktitle = {Proceedings of the 2006 {{International Workshop}} on {{Mining Software Repositories}}},
  series = {MSR '06},
  publisher = {{ACM}},
  author = {Voinea, Lucian and Telea, Alexandru},
  urldate = {2016-04-08},
  date = {2006},
  year = {2006},
  pages = {33--39},
  keywords = {CVS repositories,evolution visualization,software visualization}
}

@inproceedings{lee2013,
  title = {A {{Git Source Repository Analysis Tool Based}} on a {{Novel Branch-Oriented Approach}}},
  doi = {10.1109/ICISA.2013.6579457},
  abstract = {Code repositories of the version control systems have been used as important raw material in lots of developer behavior studies. In such research, commits are usually considered as a unit of development phases, even though they contain limited information over development process. Unlike former source code management systems, Git provides branching, which are the unit of concurrent and independent development activities in a whole project. Branches have significant advantages over commits from the viewpoint of the developer behavior researchers. By exploiting the characteristics of branching, we propose a Git branch analysis tool. The proposed tool automatically extracts branching data from Git repositories and performs statistical and graphical analysis on them. Through a few case studies using a number of popular OSS project repositories, we showed that the proposed branch-oriented analyzer is able to perform more insightful analysis than the existing commit-based analyzers.},
  eventtitle = {2013 International Conference on Information Science and Applications (ICISA)},
  timestamp = {2016-04-08T17:40:37Z},
  booktitle = {2013 {{International Conference}} on {{Information Science}} and {{Applications}} ({{ICISA}})},
  author = {Lee, H. and Seo, B. K. and Seo, E.},
  date = {2013-06},
  year = {2013},
  pages = {1--4},
  keywords = {automatic branching data extraction,branch-oriented analyzer,concurrency control,concurrent development activities,Conferences,data handling,data mining,development phases,development process,Git branch analysis tool,Git source repository analysis tool,graphical analysis,History,independant development activities,Kernel,Linux,Merging,Open source software,open source software project repositories,OSS project repositories,project management,public domain software,raw material,source coding,statistical analysis,version control systems}
}

@misc{EasyBi,
  title = {{EasyBi} Business Intelligence},
  howpublished = {\url{{https://eazybi.com/features}}},
  note = {Accessed: 2016-04-09},
  year = {2016}
}

@misc{Gitinspector,
  title = {Gitinspector},
  howpublished = {\url{https://github.com/ejwa/gitinspector}},
  note = {Accessed: 2016-04-09},
  year = {2016}
}

@misc{nifi,
  title = {{{NiFi System Administrator}}’s {{Guide}}},
  howpublished = {\url{https://nifi.apache.org/docs/nifi-docs/html/administration-guide.html#key-derivation-functions}},
  timestamp = {2016-04-10T16:36:37Z},
  author = {{The Apache Software Foundation}},
  note = {Accessed: 2016-04-10},
  year = {2016}
}

@inproceedings{typer,
 author = {Lindahl, Tobias and Sagonas, Konstantinos},
 title = {TypEr: A Type Annotator of Erlang Code},
 booktitle = {Proceedings of the 2005 ACM SIGPLAN Workshop on Erlang},
 series = {ERLANG '05},
 year = {2005},
 isbn = {1-59593-066-3},
 location = {Tallinn, Estonia},
 pages = {17--25},
 numpages = {9},
 url = {http://doi.acm.org/10.1145/1088361.1088366},
 doi = {10.1145/1088361.1088366},
 acmid = {1088366},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Erlang, constraint-based type inference, principal typings, subtyping, success typings},
}

@misc{typescript,
  title = {{{TypeScript}} - {{JavaScript}} that scales.},
  howpublished = {\url{https://www.typescriptlang.org/}},
  timestamp = {2016-04-10T22:56:50Z},
  author = {Microsoft Corporation,},
  note = {Accessed: 2016-04-10},
  urldate = {2016-04-10},
  year = {2016}
}

@INPROCEEDINGS{6980212, 
  author={A. Bergel and S. Maass and S. Ducasse and T. Girba}, 
  booktitle={Software Visualization (VISSOFT), 2014 Second IEEE Working Conference on}, 
  title={A Domain-Specific Language for Visualizing Software Dependencies as a Graph}, 
  year={2014}, 
  pages={45-49}, 
  keywords={data visualisation;graph theory;software metrics;DSL;GRAPH;domain-specific language;software dependency visualization;software metrics;Color;Layout;Measurement;Production;Shape;Software;Visualization;Graph;Pharo;Roassal;Visualization}, 
  doi={10.1109/VISSOFT.2014.17}, 
  month={Sept}
}

@INPROCEEDINGS{6980224, 
  author={R. G. Kula and C. D. Roover and D. German and T. Ishio and K. Inoue}, 
  booktitle={Software Visualization (VISSOFT), 2014 Second IEEE Working Conference on}, 
  title={Visualizing the Evolution of Systems and Their Library Dependencies}, 
  year={2014}, 
  pages={127-136}, 
  keywords={data visualisation;software libraries;LDP;SDP;library dependencies;library-centric dependant diffusion plot;system evolution visualization;system-centric dependency plots;time-series visualization;Color;Evolution (biology);Layout;Libraries;Shape;Software;Visualization;Software Evolution;Software Maintenance;Software Reuse}, 
  doi={10.1109/VISSOFT.2014.29}, 
  month={Sept}
}


@INPROCEEDINGS{6650525, 
  author={A. Hanjalić}, 
  booktitle={Software Visualization (VISSOFT), 2013 First IEEE Working Conference on}, 
  title={ClonEvol: Visualizing software evolution with code clones}, 
  year={2013}, 
  pages={1-4}, 
  keywords={configuration management;data visualisation;software engineering;C source code;C++ source code;ClonEvol visual analysis tool;Doxygen;Java source code;Simian;clone relations;code clones;code duplication detector;data acquisition;data processing;data visualization;file structures;radial tree;scope structures;software evolution visualization;software versioning system;subversion tool-chain;Cloning;Data mining;Data visualization;Java;Scalability;Software;Visualization;Code Clones;Software Evolution Analysis;Software Visualization}, 
  doi={10.1109/VISSOFT.2013.6650525}, 
  month={Sept}
}

@INPROCEEDINGS{7332421, 
  author={M. Burch and T. Munz and F. Beck and D. Weiskopf}, 
  booktitle={Software Visualization (VISSOFT), 2015 IEEE 3rd Working Conference on}, 
  title={Visualizing work processes in software engineering with developer rivers}, 
  year={2015}, 
  pages={116-124}, 
  keywords={Linux;data visualisation;operating system kernels;software engineering;system monitoring;Linux kernel;Python;complex work process;developer rivers;developers activity flow;hierarchically organized modules;river metaphor;software engineering;software modules;timeline-based visualization technique;work process visualization;workload metrics;Color;Data visualization;Monitoring;Rivers;Software systems;Visualization}, 
  doi={10.1109/VISSOFT.2015.7332421}, 
  month={Sept}
}


@INPROCEEDINGS{6980225, 
  author={S. Rufiange and G. Melançon}, 
  booktitle={Software Visualization (VISSOFT), 2014 Second IEEE Working Conference on}, 
  title={AniMatrix: A Matrix-Based Visualization of Software Evolution}, 
  year={2014}, 
  pages={137-146}, 
  keywords={computer graphics;directed graphs;public domain software;source code (software);AniMatrix;generic visualization;matrix-based visualization;open-source repositories;software evolution;software project;source code;weighted digraphs;Animation;Color;Couplings;History;Software;Taxonomy;Visualization;matrix visualization;network visualization;software design;software evolution;software visualization}, 
  doi={10.1109/VISSOFT.2014.30}, 
  month={Sept}
}

@INPROCEEDINGS{6650521, 
  author={S. P. Reiss and A. Tarvo}, 
  booktitle={Software Visualization (VISSOFT), 2013 First IEEE Working Conference on}, 
  title={Tool demonstration: The visualizations of code bubbles}, 
  year={2013}, 
  pages={1-4}, 
  keywords={Java;data visualisation;Java;code bubble visualization;tool demonstration;user experience;Color;Context;Debugging;History;Java;Software;Visualization}, 
  doi={10.1109/VISSOFT.2013.6650521}, 
  month={Sept}
}

@INPROCEEDINGS{7332410, 
  author={R. van Hees and J. Hage}, 
  booktitle={Software Visualization (VISSOFT), 2015 IEEE 3rd Working Conference on}, 
  title={Stable Voronoi-based visualizations for software quality monitoring}, 
  year={2015}, 
  pages={6-15}, 
  keywords={Hilbert transforms;computational geometry;curve fitting;data visualisation;software quality;Voronoi sites;Voronoi treemaps;additively weighted power Voronoi diagrams;scaled Hilbert curves;site location;software quality attribute visualization;software quality monitoring;stable Voronoi-based visualizations;Data visualization;Layout;Measurement;Software algorithms;Software systems;Visualization}, 
  doi={10.1109/VISSOFT.2015.7332410}, 
  month={Sept}
}

@INPROCEEDINGS{6650547, 
  author={F. Servant and J. A. Jones}, 
  booktitle={Software Visualization (VISSOFT), 2013 First IEEE Working Conference on}, 
  title={Chronos: Visualizing slices of source-code history}, 
  year={2013}, 
  pages={1-4}, 
  keywords={data visualisation;pattern recognition;reverse engineering;source coding;user interfaces;change history;chronos;high level view;historical change events;identifying design rationale;low level view;pattern recognition;queried code;reverse engineering;revision control system tools;semantic comprehension;source code history;visualization;visualizing slices;zoom able user interface;Conferences;Data mining;History;Navigation;Software systems;Visualization}, 
  doi={10.1109/VISSOFT.2013.6650547}, 
  month={Sept}
}

@INPROCEEDINGS{6650523, 
  author={J. P. Sandoval Alcocer and A. Bergel and S. Ducasse and M. Denker}, 
  booktitle={Software Visualization (VISSOFT), 2013 First IEEE Working Conference on}, 
  title={Performance evolution blueprint: Understanding the impact of software evolution on performance}, 
  year={2013}, 
  pages={1-9}, 
  keywords={software performance evaluation;JProfiler;Rizel;YourKit;code profiler;performance drop;performance evolution blueprint;performance improvement;performance variation root;recognized code profilers;software evolution;software revisions;visual representations;Benchmark testing;Color;Context;Measurement;Shape;Software;Visualization;profiling;software evolution;software execution;visualization}, 
  doi={10.1109/VISSOFT.2013.6650523}, 
  month={Sept}
}

@INPROCEEDINGS{6980223, 
  author={B. Ens and D. Rea and R. Shpaner and H. Hemmati and J. E. Young and P. Irani}, 
  booktitle={Software Visualization (VISSOFT), 2014 Second IEEE Working Conference on}, 
  title={ChronoTwigger: A Visual Analytics Tool for Understanding Source and Test Co-evolution}, 
  year={2014}, 
  pages={117-126}, 
  keywords={data visualisation;interactive systems;program testing;software engineering;source code (software);ChronoTwigger;analyst information inference ability improvement;co-change;co-evolution visualization;file grouping;interactive visual analytics tool;software artifacts;software development;software systems;software testing;source code co-evolution;source files;source repository mining;test code co-evolution;test files;Couplings;Data mining;Data visualization;Software;Testing;Three-dimensional displays;Visual analytics;3D visualization;Co-evolution;co-change;information visualization;mining software repositories;temporal data visualization;visual analytics}, 
  doi={10.1109/VISSOFT.2014.28}, 
  month={Sept}
}

@INPROCEEDINGS{6650522, 
  author={S. Elsen}, 
  booktitle={Software Visualization (VISSOFT), 2013 First IEEE Working Conference on}, 
  title={VisGi: Visualizing Git branches}, 
  year={2013}, 
  pages={1-4}, 
  keywords={data visualisation;directed graphs;trees (mathematics);Git repositories;Sunburst diagrams;VisGi;branch structure abstract;branch structure visualization;directed acyclic graph;folder trees;git branches visualization;graph layout strategies;Conferences;Data mining;Data visualization;History;Layout;Software;Visualization;CVS;branching;git;versioning;visualization}, 
  doi={10.1109/VISSOFT.2013.6650522}, 
  month={Sept}
}

@INPROCEEDINGS{6650532, 
  author={A. Shrestha and Y. Zhu and B. Miller}, 
  booktitle={Software Visualization (VISSOFT), 2013 First IEEE Working Conference on}, 
  title={Visualizing time and geography of open source software with storygraph}, 
  year={2013}, 
  pages={1-4}, 
  keywords={data visualisation;distributed programming;public domain software;socio-economic effects;D3.js;Free/Libre and Open source software;GitHub;Homebrew;Storygraph;VCS of Rails;geographic location;geography;online collaboration platforms;open source software;socio-economic marker;spatio-temporal visualization technique;subversion systems;time visualization;Collaboration;Data visualization;Educational institutions;Google;Open source software;Rails}, 
  doi={10.1109/VISSOFT.2013.6650532}, 
  month={Sept}
}

@INPROCEEDINGS{6980226, 
  author={R. Minelli and A. Mocci and M. Lanza and L. Baracchi}, 
  booktitle={Software Visualization (VISSOFT), 2014 Second IEEE Working Conference on}, 
  title={Visualizing Developer Interactions}, 
  year={2014}, 
  pages={147-156}, 
  keywords={data mining;data visualisation;programming environments;software engineering;source code (software);user interfaces;IDE;developer interaction visualization;finest-grained UI-level event mining;finest-grained UI-level event processing;integrated development environments;software systems;source code;user interface;visual approach;Containers;Data visualization;Debugging;Inspection;Navigation;Tracking;Visualization;IDE;comprehension;interaction;visual storytelling}, 
  doi={10.1109/VISSOFT.2014.31}, 
  month={Sept}
}

@inproceedings{Hindle:2008:LCT:1370750.1370773,
 author = {Hindle, Abram and German, Daniel M. and Holt, Ric},
 title = {What Do Large Commits Tell Us?: A Taxonomical Study of Large Commits},
 booktitle = {Proceedings of the 2008 International Working Conference on Mining Software Repositories},
 series = {MSR '08},
 year = {2008},
 isbn = {978-1-60558-024-1},
 location = {Leipzig, Germany},
 pages = {99--108},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/1370750.1370773},
 doi = {10.1145/1370750.1370773},
 acmid = {1370773},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {large commits, software evolution, source control system},
}

@online{git:merge,
  title = {Git - git-merge {{Documentation}}},
  organization  = {Git},
  url = {https://git-scm.com/docs/git-merge/2.8.4#_true_merge},
  timestamp = {2016-06-13T18:32:23Z},
  urldate = {2016-06-13},
  year = {2016}
}

@article{codeswarm,
  title = {Code\_{{Swarm}}: {{A Design Study}} in {{Organic Software Visualization}}},
  volume = {15},
  issn = {1077-2626},
  url = {http://dx.doi.org/10.1109/TVCG.2009.123},
  doi = {10.1109/TVCG.2009.123},
  shorttitle = {Code\_{{Swarm}}},
  abstract = {In May of 2008, we published online a series of software visualization videos using a method called code\_swarm. Shortly thereafter, we made the code open source and its popularity took off. This paper is a study of our code swarm application, comprising its design, results and public response. We share our design methodology, including why we chose the organic information visualization technique, how we designed for both developers and a casual audience, and what lessons we learned from our experiment. We validate the results produced by code\_swarm through a qualitative analysis and by gathering online user comments. Furthermore, we successfully released the code as open source, and the software community used it to visualize their own projects and shared their results as well. In the end, we believe code\_swarm has positive implications for the future of organic information design and open source information visualization practice.},
  timestamp = {2016-06-06T16:05:43Z},
  number = {6},
  journaltitle = {IEEE Transactions on Visualization and Computer Graphics},
  author = {Ogawa, Michael and Ma, Kwan-Liu},
  urldate = {2016-06-02},
  date = {2009-11},
  pages = {1097--1104},
  keywords = {organic information visualization,software development history and evolution.,software visualization}
}

@inproceedings{sourcevis,
  title = {{{SourceVis}}: {{Collaborative}} software visualization for co-located environments},
  doi = {10.1109/VISSOFT.2013.6650527},
  shorttitle = {{{SourceVis}}},
  abstract = {Most software development tools and applications are designed from a single-user perspective and are bound to the desktop and Integrated Development Environments (IDEs). These tools and applications make it hard for developers to analyse and interact with software artifacts collaboratively. We present SourceVisa multi-user collaborative software visualization application for use on large multi-touch tables. We describe the design and visualization features of SourceVis, present findings from a user study, and discuss the implications for building collaborative software visualization applications.},
  eventtitle = {2013 First IEEE Working Conference on Software Visualization (VISSOFT)},
  timestamp = {2016-06-02T15:10:43Z},
  booktitle = {2013 {{First IEEE Working Conference}} on {{Software Visualization}} ({{VISSOFT}})},
  author = {Anslow, C. and Marshall, S. and Noble, J. and Biddle, R.},
  date = {2013-09},
  pages = {1--10},
  keywords = {Collaborative software,Collaborative Software Visualization,colocated environments,Co-located Environments,data visualisation,Encoding,groupware,Keyboards,Measurement,multiprogramming,multitouch tables,Multi-touch Tables,Multi-user,multiuser collaborative software visualization application,Software,software artifacts,software development tools,SourceVis design feature,SourceVis visualization feature,User interfaces,Visualization,Vocabulary}
}

@inproceedings{gource,
  location = {{New York, NY, USA}},
  title = {Gource: {{Visualizing Software Version Control History}}},
  isbn = {978-1-4503-0240-1},
  url = {http://doi.acm.org/10.1145/1869542.1869554},
  doi = {10.1145/1869542.1869554},
  shorttitle = {Gource},
  abstract = {This film demonstrates a tool for visualizing the development history of software projects as an interactive animation, showing developers working on the hierarchical file-directory structure of a project over the course of its development.},
  timestamp = {2016-06-02T15:09:59Z},
  booktitle = {Proceedings of the {{ACM International Conference Companion}} on {{Object Oriented Programming Systems Languages}} and {{Applications Companion}}},
  series = {OOPSLA '10},
  publisher = {{ACM}},
  author = {Caudwell, Andrew H.},
  urldate = {2016-06-02},
  date = {2010},
  pages = {73--74},
  keywords = {force-directed,software development history,software visualization}
}

@inproceedings{sillito2006,
  location = {{New York, NY, USA}},
  title = {Questions {{Programmers Ask During Software Evolution Tasks}}},
  isbn = {978-1-59593-468-0},
  url = {http://doi.acm.org/10.1145/1181775.1181779},
  doi = {10.1145/1181775.1181779},
  abstract = {Though many tools are available to help programmers working on change tasks, and several studies have been conducted to understand how programmers comprehend systems, little is known about the specific kinds of questions programmers ask when evolving a code base. To fill this gap we conducted two qualitative studies of programmers performing change tasks to medium to large sized programs. One study involved newcomers working on assigned change tasks to a medium-sized code base. The other study involved industrial programmers working on their own change tasks on code with which they had experience. The focus of our analysis has been on what information a programmer needs to know about a code base while performing a change task and also on howthey go about discovering that information. Based on this analysis we catalog and categorize 44 different kinds of questions asked by our participants. We also describe important context for how those questions were answered by our participants, including their use of tools.},
  timestamp = {2016-06-15T15:12:17Z},
  booktitle = {Proceedings of the 14th {{ACM SIGSOFT International Symposium}} on {{Foundations}} of {{Software Engineering}}},
  series = {SIGSOFT '06/FSE-14},
  publisher = {{ACM}},
  author = {Sillito, Jonathan and Murphy, Gail C. and De Volder, Kris},
  urldate = {2016-06-15},
  date = {2006},
  pages = {23--34},
  keywords = {change tasks,development tools,empirical study,grounded theory,program comprehension,software evolution}
}
